import React, { useState } from 'react';

const ExportFavorites = ({ internships, isOpen, onClose, language = 'en' }) => {
  const [selectedInternships, setSelectedInternships] = useState([]);
  const [isGenerating, setIsGenerating] = useState(false);

  const translations = {
    en: {
      exportFavorites: "Export Favorites",
      selectInternships: "Select internships to export",
      generatePDF: "Generate PDF Report",
      close: "Close",
      personalSummary: "Personal Summary",
      recommendations: "Recommendations",
      skillAnalysis: "Skill Analysis",
      careerInsights: "Career Insights",
      generating: "Generating PDF...",
      download: "Download PDF"
    },
    hi: {
      exportFavorites: "पसंदीदा निर्यात करें",
      selectInternships: "निर्यात के लिए इंटर्नशिप चुनें",
      generatePDF: "PDF रिपोर्ट बनाएं",
      close: "बंद करें",
      personalSummary: "व्यक्तिगत सारांश",
      recommendations: "सिफारिशें",
      skillAnalysis: "कौशल विश्लेषण",
      careerInsights: "करियर अंतर्दृष्टि",
      generating: "PDF बना रहे हैं...",
      download: "PDF डाउनलोड करें"
    }
  };

  const t = translations[language] || translations.en;

  const handleInternshipToggle = (internship) => {
    if (selectedInternships.includes(internship)) {
      setSelectedInternships(selectedInternships.filter(i => i !== internship));
    } else {
      setSelectedInternships([...selectedInternships, internship]);
    }
  };

  const generatePDF = async () => {
    setIsGenerating(true);
    
    // Simulate PDF generation
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Create a simple text-based report (in a real app, you'd use a PDF library)
    const reportContent = generateReportContent();
    
    // Create and download the file
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `internship-recommendations-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    
    setIsGenerating(false);
  };

  const generateReportContent = () => {
    const currentDate = new Date().toLocaleDateString();
    
    let content = `
INTERNSHIP RECOMMENDATION REPORT
Generated on: ${currentDate}
=====================================

PERSONAL SUMMARY
================
Based on your profile, we've identified ${selectedInternships.length} internship opportunities that match your skills and preferences.

TOP RECOMMENDATIONS
===================
`;

    selectedInternships.forEach((internship, index) => {
      content += `
${index + 1}. ${internship.title} at ${internship.company}
   Location: ${internship.location}
   Stipend: ₹${internship.stipend}
   Duration: ${internship.duration}
   Score: ${internship.score}/10
   
   Why Recommended:
   ${internship.narratives?.map(n => `   • ${n}`).join('\n') || '   • Strong match with your profile'}
   
   Required Skills:
   ${internship.skills?.join(', ') || 'Various skills'}
   
   ---
`;
    });

    content += `
SKILL ANALYSIS
==============
Based on your selected internships, here are the key skills in demand:

`;

    // Analyze skills from selected internships
    const allSkills = selectedInternships.flatMap(i => i.skills || []);
    const skillCounts = allSkills.reduce((acc, skill) => {
      acc[skill] = (acc[skill] || 0) + 1;
      return acc;
    }, {});

    const topSkills = Object.entries(skillCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5);

    topSkills.forEach(([skill, count]) => {
      content += `• ${skill}: Required in ${count} internship(s)\n`;
    });

    content += `
CAREER INSIGHTS
===============
• Focus on developing the most in-demand skills listed above
• Consider internships with higher scores for better matches
• Look for opportunities that offer both learning and competitive compensation
• Rural and diverse sector opportunities provide unique experiences

NEXT STEPS
==========
1. Review each internship opportunity carefully
2. Prepare applications highlighting your relevant skills
3. Consider reaching out to companies for more information
4. Use the chat feature to get personalized advice for each opportunity

Generated by PM Internship Recommendation System
For SIH25034 - AI-Based Internship Recommendation Engine
`;

    return content;
  };

  if (!isOpen) return null;

  return (
    <div 
      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
      onClick={onClose}
    >
      <div 
        className="bg-white rounded-xl shadow-2xl w-full max-w-4xl h-[80vh] flex flex-col"
        onClick={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-gray-200">
          <h3 className="text-xl font-semibold text-gray-900 flex items-center">
            <span className="mr-2">📄</span>
            {t.exportFavorites}
          </h3>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-full transition-colors duration-200"
          >
            <svg className="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-y-auto p-6">
          <p className="text-center text-gray-600 mb-6">{t.selectInternships}</p>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
            {internships.map((internship, index) => (
              <div
                key={index}
                className={`border rounded-lg p-4 cursor-pointer transition-all duration-200 ${
                  selectedInternships.includes(internship)
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                }`}
                onClick={() => handleInternshipToggle(internship)}
              >
                <div className="flex items-start justify-between mb-2">
                  <h4 className="font-semibold text-gray-900 text-sm">{internship.title}</h4>
                  <input
                    type="checkbox"
                    checked={selectedInternships.includes(internship)}
                    onChange={() => handleInternshipToggle(internship)}
                    className="ml-2"
                  />
                </div>
                <p className="text-xs text-gray-600 mb-1">{internship.company}</p>
                <p className="text-xs text-gray-500">{internship.location} • ₹{internship.stipend}</p>
                <p className="text-xs font-medium text-blue-600 mt-1">Score: {internship.score}</p>
              </div>
            ))}
          </div>

          {selectedInternships.length > 0 && (
            <div className="text-center">
              <p className="text-sm text-gray-600 mb-4">
                Selected {selectedInternships.length} internship(s) for export
              </p>
              <button
                onClick={generatePDF}
                disabled={isGenerating}
                className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center mx-auto"
              >
                {isGenerating ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    {t.generating}
                  </>
                ) : (
                  <>
                    <span className="mr-2">📄</span>
                    {t.generatePDF}
                  </>
                )}
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ExportFavorites;
